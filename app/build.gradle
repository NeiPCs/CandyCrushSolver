apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.tmiyamon.config'
apply plugin: 'me.leolin.gradle-android-aspectj'

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.applidium.candycrushsolver"
        //the class "android.media.projection.MediaProjectionManager" doesn't exist on API lower than 21 and is compulsory for our screenshots
        minSdkVersion 21
        targetSdkVersion 24
        versionCode getVersionCode(1)
        versionName getVersionName("0.1")
    }

    productFlavors {
        stubs
        preprod
        prod
    }

    variantFilter { variant -> associateProdWithRelease(variant) }

    signingConfigs {
        release {
            Properties props = new Properties()
            props.load(new FileInputStream(file("../keystores/release.properties")))
            storeFile file(props['storeFile'])
            storePassword props['storePassword']
            keyAlias props['keyAlias']
            keyPassword props['keyPassword']
        }
    }

    buildTypes {
        distrib.initWith(buildTypes.debug)
        release.setSigningConfig(signingConfigs.release)

        buildTypes.each {
            Properties props = new Properties()
            props.load(new FileInputStream(file("../keystores/release.properties")))
            it.buildConfigField 'String', 'APP_KEY', props['keyAlias'] as String
        }
    }

    decorateFlavors()


    sourceSets.main {
        jniLibs.srcDir '../libs/opencv/jniLibs'
    }

    testOptions {
        unitTests.all {
            jvmArgs '-Djava.library.path=src/test'
        }
    }

    packagingOptions {
        exclude 'META-INF/maven/commons-io/commons-io/pom.xml'
        exclude 'META-INF/maven/commons-io/commons-io/pom.properties'
    }

    // Open finder on the apks when doing release builds
    applicationVariants.all { variant ->
        variant.assemble.doLast {
            //If this is a 'release' build, reveal the compiled apk in finder/explorer
            if (variant.buildType.name.contains('release')) {

                def path = null;
                variant.outputs.each { output ->
                    path = output.outputFile
                }

                exec {
                    if (System.properties['os.name'].toLowerCase().contains('mac os x')) {
                        ['open', '-R', path].execute()
                    } else if (System.properties['os.name'].toLowerCase().contains('windows')) {
                        ['explorer', '/select,', path].execute()
                    }
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs "libs"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:palette-v7:24.1.1'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile project(':libs:opencv')
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'net.hockeyapp.android:HockeySDK:4.1.0-beta.2'

    testCompile 'junit:junit:4.12'

    compile "com.google.dagger:dagger:2.5"
    apt "com.google.dagger:dagger-compiler:2.5"
    provided "javax.annotation:javax.annotation-api:1.2"
}

task copyResDirectoryToClasses(type: Copy){
    from "${projectDir}/src/main/res/raw"
    into "${buildDir}/intermediates/classes/test/debug/assets"
    from "${projectDir}/src/test/res"
    into "${buildDir}/intermediates/classes/test/debug/assets"
}

afterEvaluate {
    preBuild.dependsOn(copyResDirectoryToClasses)
}

private decorateFlavors() {
    android.buildTypes.all { type ->

        if (!type.debuggable) {
            return
        }

        def version = android.defaultConfig.versionCode
        def sha1 = 'git rev-parse --short HEAD'.execute().text.trim()

        applicationIdSuffix = ".${type.name}"
        versionNameSuffix = "-${version}-${sha1}-${type.name}"
    }
    android.productFlavors.all { flavor ->
        def String name = flavor.name

        if ("prod".equals(name)) {
            return
        }

        applicationId = appendedApplicationId(name)
        versionName = appendedVersionName(name)
    }
}

private String appendedVersionName(String name) {
    android.defaultConfig.versionName + toAppend(name, "-")
}

private String appendedApplicationId(String name) {
    android.defaultConfig.applicationId + toAppend(name, ".")
}

private String toAppend(String name, String sep) {
    name.isEmpty() ? "" : sep + name
}

Closure associateProdWithRelease(variant) {
    def isRelease = variant.buildType.name.equals('release')
    def isProd = variant.getFlavors().get(0).name.equals('prod')

    if (isRelease) {
        variant.setIgnore(!isProd);
    }
}

def getVersionName(defaultVName) {
    if (project.hasProperty('vName') && project.vName) {
        return project.vName
    }
    return defaultVName
}

def getVersionCode(defaultVCode) {
    if (project.hasProperty('vCode') && project.vCode) {
        return project.vCode.toInteger()
    }
    return defaultVCode
}


task('getVariantInfo') << {
    println "Variants:\n"
    android.applicationVariants.all { v ->
        println v.name
        println v.buildType.name
        println v.buildType.applicationIdSuffix
        println v.buildType.versionNameSuffix
        println v.mergedFlavor.versionName
        println v.mergedFlavor.applicationId
        println ""
    }
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
    installAll.dependsOn(variant.install)
    // Ensure we end up in the same group as the other install tasks.
    installAll.group = variant.install.group
}
